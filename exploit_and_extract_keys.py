from ecdsa.curves import SECP256k1

n = SECP256k1.order

def modinv(a, n):
    return pow(a, -1, n)

def recover_private_key(r, s1, s2, z1, z2):
    # Recover nonce k
    k = ((z1 - z2) * modinv(s1 - s2, n)) % n
    # Recover private key d
    d = ((s1 * k - z1) * modinv(r, n)) % n
    return d, k

def parse_input(prompt):
    val = input(prompt).strip()
    if val.startswith("0x"):
        return int(val, 16)
    else:
        return int(val)

if __name__ == "__main__":
    print("ECDSA Private Key Recovery (Duplicate r)")

    r = parse_input("Enter r: ")
    s1 = parse_input("Enter s1: ")
    s2 = parse_input("Enter s2: ")
    z1 = parse_input("Enter z1 (digest of message 1): ")
    z2 = parse_input("Enter z2 (digest of message 2): ")

    try:
        d, k = recover_private_key(r, s1, s2, z1, z2)
        print("\nRecovered Values:")
        print(f"Private key (decimal): {d}")
        print(f"Private key (hex): {hex(d)}")
        print(f"Nonce k (decimal): {k}")
    except Exception as e:
        print("Failed to recover private key.")
        print(f"Error: {e}")
